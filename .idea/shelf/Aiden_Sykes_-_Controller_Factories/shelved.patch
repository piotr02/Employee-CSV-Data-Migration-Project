Index: src/main/java/CSVDriver.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import model.EmployeeCsvDataValidator;\r\nimport model.EmployeeRecord;\r\nimport model.RecordCounter;\r\nimport view.CSVView;\r\n\r\nimport java.sql.Array;\r\nimport java.sql.Date;\r\nimport java.text.ParseException;\r\nimport java.text.ParsePosition;\r\nimport java.text.SimpleDateFormat;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\n\r\n\r\nimport static model.CSVReader.readCsvFile;\r\n\r\npublic class CSVDriver {\r\n\r\n\r\n    public static void main(String[] args) {\r\n\r\n        System.out.println(\"\");\r\n        System.out.println(\"============= Read CSV ======================\");\r\n        System.out.println(\"\");\r\n\r\n\r\n        System.out.println(Arrays.deepToString(\r\n                readCsvFile(\"EmployeeRecords.csv\")));\r\n\r\n        System.out.println(\"\");\r\n        System.out.println(\"============ Seperate Corrupt ===============\");\r\n        System.out.println(\"\");\r\n\r\n        EmployeeCsvDataValidator dataValidator = new EmployeeCsvDataValidator();\r\n        dataValidator.setData(readCsvFile(\"EmployeeRecords.csv\"));\r\n        dataValidator.splitData();\r\n        ArrayList<String[]> corruptedData =  dataValidator.getCorrupted();\r\n        ArrayList<String[]> validData =  dataValidator.getValid();\r\n\r\n        corruptedData.forEach(array ->{\r\n            System.out.println(Arrays.toString(array));\r\n        });\r\n\r\n        ArrayList<EmployeeRecord> employeeRecords = new ArrayList<>(\r\n                //\r\n                // Emp ID,Name Prefix,First Name,Middle Initial,Last Name,Gender,E Mail,Date of Birth,Date of Joining,Salary\r\n\r\n                validData.stream().map(recordString ->{\r\n                    EmployeeRecord record = new EmployeeRecord();\r\n                    record.employer_ID = Integer.parseInt(recordString[0]);\r\n                    record.prefix = recordString[1];\r\n                    record.firstName = recordString[2];\r\n                    record.middleInitial = recordString[3].charAt(0);\r\n                    record.lastName = recordString[4];\r\n                    record.gender = recordString[5].charAt(0);\r\n                    record.email = recordString[6];\r\n\r\n\r\n                    SimpleDateFormat fromRecordString = new SimpleDateFormat(\"dd/MM/yyyy\");\r\n                    SimpleDateFormat forSql = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n\r\n                    try {\r\n\r\n                        record.dateOfBirth = Date.valueOf(\r\n                                forSql.format(fromRecordString.parse(recordString[7]))\r\n                        );\r\n                        record.dateOfJoining =  Date.valueOf(\r\n                                forSql.format(fromRecordString.parse(recordString[8]))\r\n                        );\r\n                    } catch (ParseException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n\r\n                    record.salary = Integer.parseInt(recordString[9]);\r\n\r\n                    System.out.println(record + \"\\n\");\r\n                    return record;\r\n                }).toList());\r\n\r\n        dataValidator.setUniqueAndDuplicate();\r\n        ArrayList<String[]> uniqueData = dataValidator.getUniqueData();\r\n        ArrayList<String[]> duplicatedData = dataValidator.getDuplicatedData();\r\n        duplicatedData.forEach(array->{\r\n            System.out.println(Arrays.toString(array));\r\n        });\r\n        dataValidator.setMissingValuesData();\r\n        ArrayList<String[]> missingValuesData = dataValidator.getMissingValuesData();\r\n        missingValuesData.forEach(array->{\r\n            System.out.println(Arrays.toString(array));\r\n        });\r\n        CSVView view = new CSVView();\r\n        RecordCounter counter = new RecordCounter();\r\n        System.out.println(view.getDuplicates(counter.countDuplicated(duplicatedData)));\r\n    }\r\n//    public static boolean isEmployeeRowCorrupt(String[] row, HashSet<String> existingIds){\r\n//\r\n//        if(row.length != 10) return true;\r\n//\r\n//\r\n//        String id = row[0];\r\n//        String middleInitial = row[3];\r\n//        String gender = row[5];\r\n//        String salary = row[9];\r\n//\r\n//        // If ID isn't numeric, add to Corrupt Array file.\r\n//        if(id.matches(\"[a-zA-Z]+\")){\r\n//             return true;\r\n//        }\r\n//        if(existingIds.contains(id)){\r\n//            return true;\r\n//        }\r\n//\r\n//        //   If Middle initial not 1 character long\r\n//        if(!(middleInitial.length() == 1)){\r\n//             return true;\r\n//        }\r\n//        //   If Gender not in M, F\r\n//        if(!gender.matches((\"^M$|^F$\"))){\r\n//            return true;\r\n//        }\r\n//        //   If Salary includes anything but numbers\r\n//        if(salary.matches(\"[a-zA-Z]+\")){\r\n//            return true;\r\n//        }\r\n//\r\n//        // if name prefix not in enum?\r\n//\r\n//        // If date of birth/date of join don't adhere to date format\r\n//\r\n//        return false;\r\n//    }\r\n//\r\n//\r\n\r\n\r\n//    public static ArrayList corruptReader(String filename) {\r\n//        ArrayList corruptArray = new ArrayList();\r\n//        CSVReader fileReader = new CSVReader();\r\n//        String[][] fileArray = fileReader.readCsvFile(filename);\r\n//        HashSet<String> idSet = new HashSet<>();\r\n//        for(int i = 0; i< fileArray.length; i++){\r\n//            boolean corrupted = false;\r\n//            if(fileArray[i].length != 10){\r\n//                corrupted = true;\r\n//            }\r\n//\r\n//            if(!corrupted){\r\n//\r\n//                String id = fileArray[i][0];\r\n//                String middleInitial = fileArray[i][3];\r\n//                String gender = fileArray[i][5];\r\n//                String salary = fileArray[i][9];\r\n//\r\n//                // If ID isn't numeric, add to Corrupt Array file.\r\n//                if(id.matches(\"[a-zA-Z]+\")){\r\n//                    corrupted = true;\r\n//                }else {\r\n//                    //If ID Already Exists add to corrupted\r\n//                    if(idSet.contains(id)){\r\n//                        corrupted = true;\r\n//                    }\r\n//                    idSet.add(id);\r\n//                }\r\n//\r\n//                //   If Middle initial not 1 character long\r\n//                if(!(middleInitial.length() == 1)){\r\n//                    corrupted = true;\r\n//                }\r\n//                //   If Gender not in M, F\r\n//                if(!gender.matches((\"^M$|^F$\"))){\r\n//                    corrupted = true;\r\n//                }\r\n//                //   If Salary includes anything but numbers\r\n//                if(salary.matches(\"[a-zA-Z]+\")){\r\n//                    corrupted = true;\r\n//                }\r\n//\r\n//            }\r\n//            if(corrupted){\r\n//                corruptArray.add(fileArray[i]);\r\n//            }\r\n//\r\n//        }\r\n//\r\n//        // if name prefix not in enum?\r\n//        // If date of birth/date of join don't adhere to date format\r\n//\r\n//        System.out.println(\"========================\");\r\n//\r\n//        return corruptArray;\r\n//    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/CSVDriver.java b/src/main/java/CSVDriver.java
--- a/src/main/java/CSVDriver.java	(revision c4a1d2d69e7888d5b5550a7deadc1b6f202867e5)
+++ b/src/main/java/CSVDriver.java	(date 1644490991896)
@@ -15,7 +15,7 @@
 import java.util.Calendar;
 
 
-import static model.CSVReader.readCsvFile;
+import static model.CSVReader.*;
 
 public class CSVDriver {
 
